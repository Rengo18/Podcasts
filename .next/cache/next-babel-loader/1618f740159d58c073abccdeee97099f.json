{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Rengo\\\\desktop\\\\podcasts\\\\pages\\\\channel.js\";\nimport React from \"react\";\nimport Layout from '../components/Layout';\nimport SerieGrid from '../components/SerieGrid';\nimport AudioList from '../components/AudioList';\nimport Banner from '../components/Banner';\nimport Error from './_error';\n\nvar _default =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(_default, _React$Component);\n\n  function _default() {\n    _classCallCheck(this, _default);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(_default).apply(this, arguments));\n  }\n\n  _createClass(_default, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          channel = _this$props.channel,\n          audioClips = _this$props.audioClips,\n          series = _this$props.series,\n          statusCode = _this$props.statusCode;\n\n      if (statusCode !== 200) {\n        return React.createElement(Error, {\n          statusCode: statusCode,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Layout, {\n        title: channel.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(Banner, {\n        banner: channel.urls.banner_image.original,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, channel.title), series.length > 0 ? React.createElement(SerieGrid, {\n        series: series,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }) : '', audioClips.length > 0 ? React.createElement(AudioList, {\n        audioClips: audioClips,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }) : '');\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var query, res, idChannel, _ref2, _ref3, reqChannel, reqAudio, reqSeries, dataChannel, channel, dataAudio, audioClips, dataSeries, series;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                query = _ref.query, res = _ref.res;\n                idChannel = query.id;\n                _context.prev = 2;\n                _context.next = 5;\n                return _Promise.all([fetch(\"https://api.audioboom.com/channels/\".concat(idChannel)), fetch(\"https://api.audioboom.com/channels/\".concat(idChannel, \"/audio_clips\")), fetch(\"https://api.audioboom.com/channels/\".concat(idChannel, \"/child_channels\"))]);\n\n              case 5:\n                _ref2 = _context.sent;\n                _ref3 = _slicedToArray(_ref2, 3);\n                reqChannel = _ref3[0];\n                reqAudio = _ref3[1];\n                reqSeries = _ref3[2];\n\n                if (!(reqChannel.status >= 400)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                res.statusCode = reqChannel.status;\n                return _context.abrupt(\"return\", {\n                  channel: null,\n                  audioClips: null,\n                  seres: null,\n                  statusCode: 404\n                });\n\n              case 13:\n                _context.next = 15;\n                return reqChannel.json();\n\n              case 15:\n                dataChannel = _context.sent;\n                channel = dataChannel.body.channel;\n                _context.next = 19;\n                return reqAudio.json();\n\n              case 19:\n                dataAudio = _context.sent;\n                audioClips = dataAudio.body.audio_clips;\n                _context.next = 23;\n                return reqSeries.json();\n\n              case 23:\n                dataSeries = _context.sent;\n                series = dataSeries.body.channels;\n                return _context.abrupt(\"return\", {\n                  channel: channel,\n                  audioClips: audioClips,\n                  series: series,\n                  statusCode: 200\n                });\n\n              case 28:\n                _context.prev = 28;\n                _context.t0 = _context[\"catch\"](2);\n                res.statusCode = 503;\n                return _context.abrupt(\"return\", {\n                  channel: null,\n                  audioClips: null,\n                  seres: null,\n                  statusCode: 503\n                });\n\n              case 32:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 28]]);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return _default;\n}(React.Component);\n\nexport { _default as default };","map":{"version":3,"sources":["C:\\Users\\Rengo\\desktop\\podcasts\\pages\\channel.js"],"names":["Layout","SerieGrid","AudioList","Banner","Error","props","channel","audioClips","series","statusCode","title","urls","banner_image","original","length","query","res","idChannel","id","all","fetch","reqChannel","reqAudio","reqSeries","status","seres","json","dataChannel","body","dataAudio","audio_clips","dataSeries","channels","React","Component"],"mappings":"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","sourcesContent":["import Layout from '../components/Layout';\r\nimport SerieGrid from '../components/SerieGrid';\r\nimport AudioList from '../components/AudioList';\r\nimport Banner from '../components/Banner';\r\nimport Error from './_error';\r\nexport default class extends React.Component{\r\n   \r\n    static async getInitialProps({ query,res }){\r\n        let idChannel = query.id;\r\n        try{\r\n            let [reqChannel,reqAudio,reqSeries] = await Promise.all([\r\n                fetch(`https://api.audioboom.com/channels/${idChannel}`),\r\n                fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`),\r\n                fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`)\r\n    \r\n            ])\r\n            \r\n            if(reqChannel.status >= 400){\r\n                res.statusCode= reqChannel.status\r\n                return { channel:null,audioClips:null,seres:null,statusCode:404}\r\n            }\r\n            \r\n            \r\n            let dataChannel = await reqChannel.json();\r\n            let channel = dataChannel.body.channel;\r\n    \r\n         \r\n            let dataAudio = await reqAudio.json();\r\n            let audioClips = dataAudio.body.audio_clips;\r\n            \r\n    \r\n            let dataSeries = await reqSeries.json();\r\n            let series = dataSeries.body.channels;\r\n    \r\n            return {  channel,audioClips,series,statusCode: 200  };\r\n            \r\n        }catch (e){\r\n            res.statusCode=503;\r\n            return { channel:null,audioClips:null,seres:null,statusCode:503}\r\n        }\r\n       \r\n        \r\n\r\n    }\r\n\r\n   \r\n    render(){\r\n        const { channel,audioClips,series,statusCode } = this.props;\r\n        \r\n        if( statusCode !== 200 ){\r\n            return <Error statusCode={statusCode} />\r\n        }\r\n            return (\r\n\r\n                <Layout title={channel.title}>\r\n                    <Banner banner={channel.urls.banner_image.original}/>\r\n                    <h1>{channel.title}</h1>\r\n                    {series.length > 0 ? <SerieGrid series={series} />:''}\r\n                    {audioClips.length > 0 ?<AudioList audioClips={audioClips}/>: ''}\r\n                </Layout>      \r\n                  \r\n        )\r\n    }\r\n}             \r\n                    \r\n                       \r\n            \r\n        \r\n                      \r\n                         \r\n             \r\n                                    \r\n                                  \r\n                        \r\n                   \r\n                   \r\n\r\n\r\n           \r\n            \r\n            \r\n            \r\n"]},"metadata":{},"sourceType":"module"}