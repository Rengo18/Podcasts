{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar _jsxFileName = \"C:\\\\Users\\\\Rengo\\\\desktop\\\\podcasts\\\\pages\\\\channel.js\";\nimport React from \"react\";\nimport Layout from '../components/Layout';\nimport SerieGrid from '../components/SerieGrid';\nimport AudioList from '../components/AudioList';\nimport Banner from '../components/Banner';\nimport Error from './_error';\nexport default class extends React.Component {\n  static async getInitialProps({\n    query,\n    res\n  }) {\n    let idChannel = query.id;\n\n    try {\n      let [reqChannel, reqAudio, reqSeries] = await _Promise.all([fetch(`https://api.audioboom.com/channels/${idChannel}`), fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`), fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`)]);\n\n      if (reqChannel.status >= 400) {\n        res.statusCode = reqChannel.status;\n        return {\n          channel: null,\n          audioClips: null,\n          seres: null,\n          statusCode: 404\n        };\n      }\n\n      let dataChannel = await reqChannel.json();\n      let channel = dataChannel.body.channel;\n      let dataAudio = await reqAudio.json();\n      let audioClips = dataAudio.body.audio_clips;\n      let dataSeries = await reqSeries.json();\n      let series = dataSeries.body.channels;\n      return {\n        channel,\n        audioClips,\n        series,\n        statusCode: 200\n      };\n    } catch (e) {\n      res.statusCode = 503;\n      return {\n        channel: null,\n        audioClips: null,\n        seres: null,\n        statusCode: 503\n      };\n    }\n  }\n\n  render() {\n    const {\n      channel,\n      audioClips,\n      series,\n      statusCode\n    } = this.props;\n\n    if (statusCode !== 200) {\n      return React.createElement(Error, {\n        statusCode: statusCode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(Layout, {\n      title: channel.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Banner, {\n      banner: channel.urls.banner_image.original,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, channel.title), series.length > 0 ? React.createElement(SerieGrid, {\n      series: series,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }) : '', audioClips.length > 0 ? React.createElement(AudioList, {\n      audioClips: audioClips,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }) : '');\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\Rengo\\desktop\\podcasts\\pages\\channel.js"],"names":["Layout","SerieGrid","AudioList","Banner","Error","React","Component","getInitialProps","query","res","idChannel","id","reqChannel","reqAudio","reqSeries","all","fetch","status","statusCode","channel","audioClips","seres","dataChannel","json","body","dataAudio","audio_clips","dataSeries","series","channels","e","render","props","title","urls","banner_image","original","length"],"mappings":"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","sourcesContent":["import Layout from '../components/Layout';\r\nimport SerieGrid from '../components/SerieGrid';\r\nimport AudioList from '../components/AudioList';\r\nimport Banner from '../components/Banner';\r\nimport Error from './_error';\r\nexport default class extends React.Component{\r\n   \r\n    static async getInitialProps({ query,res }){\r\n        let idChannel = query.id;\r\n        try{\r\n            let [reqChannel,reqAudio,reqSeries] = await Promise.all([\r\n                fetch(`https://api.audioboom.com/channels/${idChannel}`),\r\n                fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`),\r\n                fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`)\r\n    \r\n            ])\r\n            \r\n            if(reqChannel.status >= 400){\r\n                res.statusCode= reqChannel.status\r\n                return { channel:null,audioClips:null,seres:null,statusCode:404}\r\n            }\r\n            \r\n            \r\n            let dataChannel = await reqChannel.json();\r\n            let channel = dataChannel.body.channel;\r\n    \r\n         \r\n            let dataAudio = await reqAudio.json();\r\n            let audioClips = dataAudio.body.audio_clips;\r\n            \r\n    \r\n            let dataSeries = await reqSeries.json();\r\n            let series = dataSeries.body.channels;\r\n    \r\n            return {  channel,audioClips,series,statusCode: 200  };\r\n            \r\n        }catch (e){\r\n            res.statusCode=503;\r\n            return { channel:null,audioClips:null,seres:null,statusCode:503}\r\n        }\r\n       \r\n        \r\n\r\n    }\r\n\r\n   \r\n    render(){\r\n        const { channel,audioClips,series,statusCode } = this.props;\r\n        \r\n        if( statusCode !== 200 ){\r\n            return <Error statusCode={statusCode} />\r\n        }\r\n            return (\r\n\r\n                <Layout title={channel.title}>\r\n                    <Banner banner={channel.urls.banner_image.original}/>\r\n                    <h1>{channel.title}</h1>\r\n                    {series.length > 0 ? <SerieGrid series={series} />:''}\r\n                    {audioClips.length > 0 ?<AudioList audioClips={audioClips}/>: ''}\r\n                </Layout>      \r\n                  \r\n        )\r\n    }\r\n}             \r\n                    \r\n                       \r\n            \r\n        \r\n                      \r\n                         \r\n             \r\n                                    \r\n                                  \r\n                        \r\n                   \r\n                   \r\n\r\n\r\n           \r\n            \r\n            \r\n            \r\n"]},"metadata":{},"sourceType":"module"}